alias chrome="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"
alias chrome-canary="/Applications/Google\ Chrome\ Canary.app/Contents/MacOS/Google\ Chrome\ Canary"
alias a='php artisan'
alias la='ls -lah'
alias p='ping'
alias g='grep'
alias s='ssh'
alias t='sudo tail -n 100 -f'
alias tinker='php artisan tinker'
alias gitlog='git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short'
alias gs='git status '
alias ga='git add '
alias gb='git branch '
alias gc='git commit'
alias gd='git diff'
alias gp='git push'
alias gch='git checkout'
alias gk='gitk --all&'
alias gx='gitx --all'
alias password='pwgen -s 15 1'
alias got='git '
alias get='git '
alias subl='"/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl"'
alias composer='php -d memory_limit=-1 -n /usr/local/bin/composer'
alias nano='vim' 
alias w='npm run watch'
alias npd='npm -i -D'
alias npi='npm -i'
alias cmpi='composer install'
alias cmpr='composer require'
alias cmprd='composer require --dev'
alias rundev='npm run dev'
alias runserve='npm run serve'
alias runprod='npm run production'
alias les='laravel-echo-server start'
alias npm='/usr/local/lib/node_modules/npm/bin/npm-cli.js'
function hs() {
    ( cd ~/Homestead && vagrant $* )
}

function ngrok_qr() {
open $(curl -s http://localhost:4040/api/tunnels | jq ".tunnels[1].public_url" | xargs -I{} echo "https://chart.googleapis.com/chart?cht=qr&chl={}&chs=180x180&choe=UTF-8&chld=L|2")
}

# Other fields to query by: https://developer.apple.com/documentation/coreservices/file_metadata/mditem/file_system_metadata_attribute_keys
spotlight () { mdfind "kMDItemDisplayName == '$@'wc"; }

#   ---------------------------
#   5.  PROCESS MANAGEMENT
#   ---------------------------

#   findPid: find out the pid of a specified process
#   -----------------------------------------------------
#       Note that the command name can be specified via a regex
#       E.g. findPid '/d$/' finds pids of all processes with names ending in 'd'
#       Without the 'sudo' it will only find processes of the current user
#   -----------------------------------------------------
    findPid () { lsof -t -c "$@" ; }

#   my_ps: List processes owned by my user:
#   ------------------------------------------------------------
    my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,start,time,bsdtime,command ; }


#   ---------------------------
#   6.  NETWORKING
#   ---------------------------

alias myip='curl ip.appspot.com'                    # myip:         Public facing IP Address
alias netCons='lsof -i'                             # netCons:      Show all open TCP/IP sockets
alias flushDNS='dscacheutil -flushcache'            # flushDNS:     Flush out the DNS Cache
alias lsock='sudo /usr/sbin/lsof -i -P'             # lsock:        Display open sockets

# fd - cd to selected directory
fd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# fh - search in your command history and execute selected command
fh() {
  eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

# For more fuzzy search examples see the official repo.
# https://github.com/junegunn/fzf#fuzzy-completion-for-bash-and-zsh

# ch - browse chrome history
ch1() {
  local cols sep
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  cp -f ~/Library/Application\ Support/Google/Chrome/Profile\ 1/History /tmp/h

  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs open
}

# ch - browse chrome history
ch2() {
  local cols sep
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  cp -f ~/Library/Application\ Support/Google/Chrome/Profile\ 2/History /tmp/h

  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs open
}

function delete_cf_distribution() {
  # Disable it first
  aws cloudfront get-distribution-config --id ${1} | jq '.DistributionConfig | .Enabled = false' > /tmp/delete_cf_distribution.json
  etag=`aws cloudfront get-distribution-config --id ${1} | jq '.ETag' -r`
  aws cloudfront wait update-distribution --id ${1} --if-match ${etag} --distribution-config file:///tmp/delete_cf_distribution.json > /dev/null
  etag=`aws cloudfront get-distribution-config --id ${1} | jq '.ETag' -r`
  aws cloudfront wait delete-distribution --id ${1} --if-match ${etag} > /dev/null
}

function delete_cf_identity() {
  etag=`aws cloudfront get-cloud-front-origin-access-identity --id ${1} | jq '.ETag' -r`
  aws cloudfront delete-cloud-front-origin-access-identity --id ${1} --if-match ${etag}
}
